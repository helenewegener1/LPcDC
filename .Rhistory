########################## CD64, F4/80 -> Macrophages ##########################
grep("CD64", rownames(seurat_integrated), value = TRUE, ignore.case = TRUE) # Can't find
grep("Fcgr1", rownames(seurat_integrated), value = TRUE, ignore.case = TRUE) # chatGPT alternative
grep("F4/80", rownames(seurat_integrated), value = TRUE, ignore.case = TRUE) # Can't find
grep("Adgre1", rownames(seurat_integrated), value = TRUE, ignore.case = TRUE) # chatGPT alternative
# Define marker cell information
marker_genes <- c("Fcgr1", "Adgre1")
description <- "CD64, F4/80 -> Macrophages"
# Make plots
explore_annotation_plot(seurat_obj = seurat_integrated, dimplot = dp, marker_genes = marker_genes, description = description, subfolder = reduction)
# Clean up
rm(marker_genes, description)
############################# CD19, B220 -> B cells ############################
grep("CD19", rownames(seurat_integrated), value = TRUE, ignore.case = TRUE)
grep("B220", rownames(seurat_integrated), value = TRUE, ignore.case = TRUE) # Can't find
grep("Ptprc", rownames(seurat_integrated), value = TRUE, ignore.case = TRUE) # chatGPT alternative
# Define marker cell information
marker_genes <- c("Cd19", "Ptprc")
description <- "CD19, B220 -> B cells"
# Make plots
explore_annotation_plot(seurat_obj = seurat_integrated, dimplot = dp, marker_genes = marker_genes, description = description, subfolder = reduction)
# Clean up
rm(marker_genes, description)
############################# CD3, TCRb -> T cells #############################
grep("CD3", rownames(seurat_integrated), value = TRUE, ignore.case = TRUE)
grep("TCRb", rownames(seurat_integrated), value = TRUE, ignore.case = TRUE) # Can't find
# Define marker cell information
marker_genes <- c("Cd3e", "Cd3d", "Cd3g")
description <- "CD3, TCRb -> T cells"
# Make plots
explore_annotation_plot(seurat_obj = seurat_integrated, dimplot = dp, marker_genes = marker_genes, description = description, subfolder = reduction)
# Clean up
rm(marker_genes, description)
############################# Ly6G -> Neutrophils #############################
grep("Ly6G", rownames(seurat_integrated), value = TRUE, ignore.case = TRUE)
# Define marker cell information
marker_genes <- c("Ly6g")
description <- "Ly6G -> Neutrophils"
# Make plots
explore_annotation_plot(seurat_obj = seurat_integrated, dimplot = dp, marker_genes = marker_genes, description = description, subfolder = reduction)
# Clean up
rm(marker_genes, description)
############################### NK1.1 -> NK cells ##############################
grep("NK1", rownames(seurat_integrated), value = TRUE, ignore.case = TRUE) # Can't find
grep("Klrb1c", rownames(seurat_integrated), value = TRUE, ignore.case = TRUE) # chatGPT alternative
# Define marker cell information
marker_genes <- c("Klrb1c")
description <- "NK1.1 -> NK cells"
# Make plots
explore_annotation_plot(seurat_obj = seurat_integrated, dimplot = dp, marker_genes = marker_genes, description = description, subfolder = reduction)
# Clean up
rm(marker_genes, description)
############################ SiglecF -> Eosinophils ############################
grep("SiglecF", rownames(seurat_integrated), value = TRUE, ignore.case = TRUE)
# Define marker cell information
marker_genes <- c("Siglecf")
description <- "SiglecF -> Eosinophils"
# Make plots
explore_annotation_plot(seurat_obj = seurat_integrated, dimplot = dp, marker_genes = marker_genes, description = description, subfolder = reduction)
# Clean up
rm(marker_genes, description)
#################################################################################
# Markers for subsets in the intesine specifically: cDC2: CD103+ CD11b+ or CD103- CD11b+, cDC1: CD103+ CD11b-
grep("Itgae", rownames(seurat_integrated), value = TRUE, ignore.case = TRUE) # CD103
grep("Itgam", rownames(seurat_integrated), value = TRUE, ignore.case = TRUE) # CD11b
# Define marker cell information
marker_genes <- c("Itgae", "Itgam")
description <- "Markers for subsets in the intesine specifically: cDC2: CD103+ CD11b+ or CD103- CD11b+, cDC1: CD103+ CD11b-"
# Make plots
explore_annotation_plot(seurat_obj = seurat_integrated, dimplot = dp, marker_genes = marker_genes, description = description, subfolder = reduction)
# Clean up
rm(marker_genes, description)
}
reduction
setwd("~/Documents/projects/project_cDC/LPcDC/")
# Load libraries
library(SeuratObject)
library(Seurat)
library(glmGamPoi)
library(dplyr)
library(stringr)
library(glue)
library(ggplot2)
library(harmony)
# remotes::install_github('satijalab/seurat-wrappers')
library(SeuratWrappers)
# remotes::install_github('satijalab/azimuth', ref = 'master')
library(Azimuth)
# Load data
seurat_obj_list <- readRDS("03_QC/out/seurat_obj_finalQC_list.rds")
############################ RNA integration prep ############################
# Merge
seurat_merged <- merge(seurat_obj_list[[1]], y = seurat_obj_list[-1])
# Check that layers are split
Layers(seurat_merged[["SCT"]])
# https://github.com/satijalab/seurat/issues/7542
seurat_merged <- SCTransform(seurat_merged, vst.flavor = "v2")
DefaultAssay(seurat_merged) <- "SCT"
seurat_merged <- RunPCA(seurat_merged, npcs = 30, verbose = FALSE)
# This is just for plotting UMAP
ElbowPlot(seurat_merged)
seurat_merged <- FindNeighbors(seurat_merged,  dims = 1:30)
seurat_merged <- FindClusters(seurat_merged, resolution = 0.4)
seurat_merged <- RunUMAP(seurat_merged, reduction = "pca", dims = 1:30)
# Visualize with UMAP stratified by dataset - pre integration
DimPlot(seurat_merged, reduction = "umap", group.by = "orig.ident") +
labs(title = "UMAP - SCT - pre integration") +
theme(legend.text = element_text(size = 8))
ggsave("04_integration/plot/SCT/UMAP_SCT_pre_integration_orig.ident.pdf",
width = 8,
height = 7)
seurat_integrated <- seurat_merged
DefaultAssay(seurat_integrated)
Layers(seurat_integrated[["SCT"]])
Reductions(seurat_integrated)
# Integrate using harmony
seurat_integrated <- IntegrateLayers(
object = seurat_integrated,
method = HarmonyIntegration,
orig.reduction = "pca",
new.reduction = "SCT_integrated.harmony",
normalization.method = "SCT",
assay = "SCT",
group.by.vars = "orig.ident",
verbose = FALSE
)
# Does not work well for SCT layer
seurat_integrated <- IntegrateLayers(
object = seurat_integrated,
method = CCAIntegration,
orig.reduction = "pca",
new.reduction = "SCT_integrated.cca",
normalization.method = "SCT",
group.by.vars = "orig.ident",
assay = "SCT",
verbose = TRUE
)
# Does not work well for SCT layer
seurat_integrated <- IntegrateLayers(
object = seurat_integrated,
method = CCAIntegration,
orig.reduction = "pca",
new.reduction = "SCT_integrated.cca",
normalization.method = "SCT",
# group.by.vars = "orig.ident",
assay = "SCT",
verbose = TRUE
)
options(future.globals.maxSize = 8000 * 1024^2)  # 8 GB
seurat_integrated <- IntegrateLayers(
object = seurat_integrated,
method = RPCAIntegration,
orig.reduction = "pca",
new.reduction = "SCT_integrated.rpca",
normalization.method = "SCT",
assay = "SCT",
verbose = FALSE
)
options(future.globals.maxSize = 8000 * 1024^2)  # 8 GB
seurat_integrated <- IntegrateLayers(
object = seurat_integrated,
method = RPCAIntegration,
orig.reduction = "pca",
new.reduction = "SCT_integrated.rpca",
normalization.method = "SCT",
# assay = "SCT",
verbose = FALSE
)
options(future.globals.maxSize = 8000 * 1024^2)  # 8 GB
seurat_integrated <- IntegrateLayers(
object = seurat_integrated,
method = RPCAIntegration,
orig.reduction = "pca",
new.reduction = "SCT_integrated.rpca",
normalization.method = "SCT",
assay = "SCT",
verbose = FALSE
)
# Integrate using FastMNNIntegration
seurat_integrated <- IntegrateLayers(
object = seurat_integrated,
method = FastMNNIntegration,
orig.reduction = "pca",
new.reduction = "SCT_integrated.mnn",
normalization.method = "SCT",
assay = "SCT",
verbose = FALSE
)
options(future.globals.maxSize = 9000 * 1024^2)  # 8 GB
seurat_integrated <- IntegrateLayers(
object = seurat_integrated,
method = RPCAIntegration,
orig.reduction = "pca",
new.reduction = "SCT_integrated.rpca",
normalization.method = "SCT",
assay = "SCT",
verbose = FALSE
)
options(future.globals.maxSize = 10000 * 1024^2)  # 8 GB
seurat_integrated <- IntegrateLayers(
object = seurat_integrated,
method = RPCAIntegration,
orig.reduction = "pca",
new.reduction = "SCT_integrated.rpca",
normalization.method = "SCT",
assay = "SCT",
verbose = FALSE
)
10000 * 1024^2
options(future.globals.maxSize = 20 * 1024^3)  # 8 GB
seurat_integrated <- IntegrateLayers(
object = seurat_integrated,
method = RPCAIntegration,
orig.reduction = "pca",
new.reduction = "SCT_integrated.rpca",
normalization.method = "SCT",
assay = "SCT",
verbose = FALSE
)
# Integrate using FastMNNIntegration
seurat_integrated <- IntegrateLayers(
object = seurat_integrated,
method = FastMNNIntegration,
orig.reduction = "pca",
new.reduction = "SCT_integrated.mnn",
normalization.method = "SCT",
assay = "SCT",
verbose = FALSE
)
Reductions(seurat_integrated)
Reductions(seurat_integrated)
reductions <- list(
c("SCT_integrated.harmony", "SCT_umap.harmony", "SCT_harmony_clusters"),
# c("SCT_integrated.mnn", "SCT_umap.mnn", "SCT_mnn_clusters"),
c("SCT_integrated.rpca", "SCT_umap.rpca", "SCT_rpca_clusters"),
c("SCT_integrated.cca", "SCT_umap.cca", "SCT_cca_clusters")
)
for (red in reductions){
reduction <- red[[1]]
umap_reduction.name <- red[[2]]
cluster.name <- red[[3]]
# Either RNA or SCT
assay <- str_split_i(reduction, "_", 1)
# Set default assay
DefaultAssay(seurat_integrated) <- assay
seurat_integrated <- FindNeighbors(seurat_integrated, reduction = reduction, dims = 1:20)
seurat_integrated <- FindClusters(seurat_integrated, resolution = 2, cluster.name = cluster.name)
seurat_integrated <- RunUMAP(seurat_integrated, reduction = reduction, dims = 1:20, reduction.name = umap_reduction.name)
seurat_integrated <- FindNeighbors(seurat_integrated, reduction = reduction, dims = 1:20)
# Visualize with UMAP stratified by dataset - post harmony integration
DimPlot(seurat_integrated, reduction = umap_reduction.name, group.by = "orig.ident") +
labs(title = glue("UMAP - post {reduction}")) +
theme(legend.text = element_text(size = 8))
ggsave(glue("04_integration/plot/{assay}/UMAP_{reduction}_orig.ident.pdf"),
width = 8,
height = 7)
DimPlot(seurat_integrated, reduction = umap_reduction.name, split.by = "orig.ident", ncol = 3) +
labs(title = glue("UMAP - post {reduction}")) +
theme(legend.text = element_text(size = 8))
ggsave(glue("04_integration/plot/{assay}/UMAP_{reduction}_orig.ident_split.pdf"),
width = 12,
height = 8)
# Visualize with UMAP stratified by seurat clusters - post harmony integration
res_list <- c(0.1, 0.3, 0.5)
for (res in res_list){
# res <- 0.3
seurat_integrated <- FindClusters(seurat_integrated, resolution = res)
DimPlot(seurat_integrated, reduction = umap_reduction.name, group.by = glue("{assay}_snn_res.{res}"), label = TRUE) +
labs(title = glue("UMAP - post {reduction}"),
subtitle = glue("{assay}_snn_res.{res}"))
ggsave(glue(glue("04_integration/plot/{assay}/UMAP_{reduction}_{assay}_snn_res_{res}.pdf")),
width = 8,
height = 7)
DimPlot(seurat_integrated, reduction = umap_reduction.name, group.by = glue("{assay}_snn_res.{res}"), split.by = "orig.ident", ncol = 3) +
labs(title = glue("UMAP - post {reduction}"),
subtitle = glue("{assay}_snn_res.{res}"))
ggsave(glue("04_integration/plot/{assay}/UMAP_{reduction}_{assay}_snn_res_{res}_split.by_orig.ident.pdf"),
width = 12,
height = 8)
}
# Feature plots: UMAP stratified by continuous variable
#
# features <- c("nFeature_RNA", "percent.mt", "percent.ribo")
#
# lapply(features, function(x) {
#
#   FeaturePlot(seurat_integrated, reduction = umap_reduction.name, features = x)
#   ggsave(glue("04_integration/plot/{assay}/UMAP_{reduction}_{x}.pdf"),
#          width = 8,
#          height = 7)
#
# })
}
Reductions(seurat_integrated)
saveRDS(seurat_integrated, "04_integration/out/seurat_integrated_v5_SCT.rds")
library(SeuratDisk)
library(rhdf5)
# All in one file
obj_tmp <- seurat_integrated
DefaultAssay(obj_tmp)
Layers(obj_tmp[["SCT"]])
# IMPORTANT: Join layers before export (h5ad doesn't support split layers)
# obj_tmp[["SCT"]] <- JoinLayers(obj_tmp[["SCT"]]) # already joined
obj_tmp[["SCT3"]] <- as(object = obj_tmp[["SCT"]], Class = "Assay")
DefaultAssay(obj_tmp) <- "SCT3"
obj_tmp[["SCT"]] <- NULL
obj_tmp <- RenameAssays(object = obj_tmp, SCT3 = 'SCT')
# Check new names
reductions <- Reductions(obj_tmp)[str_detect(Reductions(obj_tmp), "integrated")]
# 1. Extract the embeddings
embeddings <- lapply(reductions, function(x) Embeddings(obj_tmp, reduction = x))
names(embeddings) <- reductions
# 2. Add the clean matrix as a new reduction
for(x in reductions) {
new_name <- str_replace(x, "\\.", "_")
new_key <- str_replace(x, "_integrated\\.", "") %>%
str_to_upper() %>%
paste0("_")
obj_tmp[[new_name]] <- CreateDimReducObject(
embeddings = embeddings[[x]],
key = new_key,
assay = DefaultAssay(obj_tmp),
global = TRUE
)
# Remove the problematic reduction to keep things clean
obj_tmp[[x]] <- NULL
}
# Handle PCA
obj_tmp[["PCA"]] <- CreateDimReducObject(
embeddings = Embeddings(obj_tmp, reduction = "pca"),
key = "PCA_",
assay = DefaultAssay(obj_tmp),
global = TRUE
)
# Remove the problematic reduction to keep things clean
obj_tmp[["pca"]] <- NULL
umap_reductions <- Reductions(obj_tmp)[str_detect(Reductions(obj_tmp), "umap")]
for (x in umap_reductions) {
obj_tmp[[x]] <- NULL
}
# Verify the new reduction name (optional)
Reductions(obj_tmp)
filename <- glue("04_integration/out/mydata_SCT_v5.h5Seurat")
SaveH5Seurat(obj_tmp, filename = filename, overwrite = TRUE)
Convert(filename, dest = "h5ad", overwrite = TRUE, verbose = FALSE)
# Verify the new reduction name (optional)
Reductions(obj_tmp)
setwd("~/Documents/projects/project_cDC/LPcDC/")
# Load libraries
library(SeuratObject)
library(Seurat)
library(dplyr)
library(glue)
library(ggplot2)
library(patchwork)
library(stringr)
source("05_annotation/script/functions.R")
assay <- "SCT"
# assay <- "RNA"
# Load data
seurat_integrated <- readRDS(glue("04_integration/out/seurat_integrated_v5_{assay}.rds"))
Reductions(seurat_integrated)
Reductions(seurat_integrated)
red_list <- list(
# red <- c("RNA_integrated.cca", "RNA_umap.cca", "RNA_cca_clusters"),
# red <- c("RNA_integrated.harmony", "RNA_umap.harmony", "RNA_harmony_clusters"),
# red <- c("RNA_integrated.mnn", "RNA_umap.mnn", "RNA_mnn_clusters"),
# red <- c("RNA_integrated.rpca", "RNA_umap.rpca", "RNA_rpca_clusters")
red <- c("SCT_integrated.cca", "SCT_umap.cca", "SCT_cca_clusters"),
red <- c("SCT_integrated.harmony", "SCT_umap.harmony", "SCT_harmony_clusters"),
red <- c("SCT_integrated.rpca", "SCT_umap.rpca", "SCT_rpca_clusters")
)
red_list <- list(
# red <- c("RNA_integrated.cca", "RNA_umap.cca", "RNA_cca_clusters"),
# red <- c("RNA_integrated.harmony", "RNA_umap.harmony", "RNA_harmony_clusters"),
# red <- c("RNA_integrated.mnn", "RNA_umap.mnn", "RNA_mnn_clusters"),
# red <- c("RNA_integrated.rpca", "RNA_umap.rpca", "RNA_rpca_clusters")
red <- c("SCT_integrated.cca", "SCT_umap.cca", "SCT_cca_clusters"),
red <- c("SCT_integrated.harmony", "SCT_umap.harmony", "SCT_harmony_clusters"),
red <- c("SCT_integrated.rpca", "SCT_umap.rpca", "SCT_rpca_clusters")
)
for (red in red_list){
reduction <- red[[1]]
umap_reduction.name <- red[[2]]
cluster.name <- red[[3]]
# Cluster plot
res <- 0.3
dp <- DimPlot(seurat_integrated, reduction = umap_reduction.name, group.by = glue("{assay}_snn_res.{res}"), label = TRUE) +
labs(title = glue("UMAP - {reduction}"),
subtitle = glue("{assay}_snn_res.{res}"))
########################### CD45+ -> All immune cells ##########################
grep("CD45", rownames(seurat_integrated), value = TRUE, ignore.case = TRUE) # Can't find
grep("Ptprc", rownames(seurat_integrated), value = TRUE, ignore.case = TRUE) # chatGPT alternative to
# Define marker cell information
marker_genes <- c("Ptprc")
description <- "CD45+ -> All immune cells"
# Make plots
explore_annotation_plot(seurat_obj = seurat_integrated, dimplot = dp, marker_genes = marker_genes, description = description, subfolder = reduction)
# Clean up
rm(marker_genes, description)
##################### MHCII -> all antigen presenting cells #####################
grep("H2-A", rownames(seurat_integrated), value = TRUE, ignore.case = TRUE)
# Define marker cell information
marker_genes <- c("H2-Ab1", "H2-Aa")
description <- "MHCII -> all antigen presenting cells"
# Make plots
explore_annotation_plot(seurat_obj = seurat_integrated, dimplot = dp, marker_genes = marker_genes, description = description, subfolder = reduction)
# Clean up
rm(marker_genes, description)
################################# XCR1 -> cDC1 #################################
grep("XCR1", rownames(seurat_integrated), value = TRUE, ignore.case = TRUE)
# Define marker cell information
marker_genes <- c("Xcr1")
description <- "XCR1 -> cDC1"
# Make plots
explore_annotation_plot(seurat_obj = seurat_integrated, dimplot = dp, marker_genes = marker_genes, description = description, subfolder = reduction)
# Clean up
rm(marker_genes, description)
#####################  SIRPa, CD11b -> Macrophages and cDC2 #####################
grep("SIRPa", rownames(seurat_integrated), value = TRUE, ignore.case = TRUE)
grep("CD11b", rownames(seurat_integrated), value = TRUE, ignore.case = TRUE) # Can't find
grep("Itgam", rownames(seurat_integrated), value = TRUE, ignore.case = TRUE) # chatGPT alternative to
# Define marker cell information
marker_genes <- c("Sirpa", "Itgam")
description <- "SIRPa, CD11b -> Macrophages and cDC2"
# Make plots
explore_annotation_plot(seurat_obj = seurat_integrated, dimplot = dp, marker_genes = marker_genes, description = description, subfolder = reduction)
# Clean up
rm(marker_genes, description)
########################## CD11c -> Macrophages + DCs ##########################
grep("CD11c", rownames(seurat_integrated), value = TRUE, ignore.case = TRUE) # Can't find
grep("Itgax", rownames(seurat_integrated), value = TRUE, ignore.case = TRUE) # chatGPT alternative to
# Define marker cell information
marker_genes <- c("Itgax")
description <- "CD11c -> Macrophages + DCs"
# Make plots
explore_annotation_plot(seurat_obj = seurat_integrated, dimplot = dp, marker_genes = marker_genes, description = description, subfolder = reduction)
# Clean up
rm(marker_genes, description)
########################## CD64, F4/80 -> Macrophages ##########################
grep("CD64", rownames(seurat_integrated), value = TRUE, ignore.case = TRUE) # Can't find
grep("Fcgr1", rownames(seurat_integrated), value = TRUE, ignore.case = TRUE) # chatGPT alternative
grep("F4/80", rownames(seurat_integrated), value = TRUE, ignore.case = TRUE) # Can't find
grep("Adgre1", rownames(seurat_integrated), value = TRUE, ignore.case = TRUE) # chatGPT alternative
# Define marker cell information
marker_genes <- c("Fcgr1", "Adgre1")
description <- "CD64, F4/80 -> Macrophages"
# Make plots
explore_annotation_plot(seurat_obj = seurat_integrated, dimplot = dp, marker_genes = marker_genes, description = description, subfolder = reduction)
# Clean up
rm(marker_genes, description)
############################# CD19, B220 -> B cells ############################
grep("CD19", rownames(seurat_integrated), value = TRUE, ignore.case = TRUE)
grep("B220", rownames(seurat_integrated), value = TRUE, ignore.case = TRUE) # Can't find
grep("Ptprc", rownames(seurat_integrated), value = TRUE, ignore.case = TRUE) # chatGPT alternative
# Define marker cell information
marker_genes <- c("Cd19", "Ptprc")
description <- "CD19, B220 -> B cells"
# Make plots
explore_annotation_plot(seurat_obj = seurat_integrated, dimplot = dp, marker_genes = marker_genes, description = description, subfolder = reduction)
# Clean up
rm(marker_genes, description)
############################# CD3, TCRb -> T cells #############################
grep("CD3", rownames(seurat_integrated), value = TRUE, ignore.case = TRUE)
grep("TCRb", rownames(seurat_integrated), value = TRUE, ignore.case = TRUE) # Can't find
# Define marker cell information
marker_genes <- c("Cd3e", "Cd3d", "Cd3g")
description <- "CD3, TCRb -> T cells"
# Make plots
explore_annotation_plot(seurat_obj = seurat_integrated, dimplot = dp, marker_genes = marker_genes, description = description, subfolder = reduction)
# Clean up
rm(marker_genes, description)
############################# Ly6G -> Neutrophils #############################
grep("Ly6G", rownames(seurat_integrated), value = TRUE, ignore.case = TRUE)
# Define marker cell information
marker_genes <- c("Ly6g")
description <- "Ly6G -> Neutrophils"
# Make plots
explore_annotation_plot(seurat_obj = seurat_integrated, dimplot = dp, marker_genes = marker_genes, description = description, subfolder = reduction)
# Clean up
rm(marker_genes, description)
############################### NK1.1 -> NK cells ##############################
grep("NK1", rownames(seurat_integrated), value = TRUE, ignore.case = TRUE) # Can't find
grep("Klrb1c", rownames(seurat_integrated), value = TRUE, ignore.case = TRUE) # chatGPT alternative
# Define marker cell information
marker_genes <- c("Klrb1c")
description <- "NK1.1 -> NK cells"
# Make plots
explore_annotation_plot(seurat_obj = seurat_integrated, dimplot = dp, marker_genes = marker_genes, description = description, subfolder = reduction)
# Clean up
rm(marker_genes, description)
############################ SiglecF -> Eosinophils ############################
grep("SiglecF", rownames(seurat_integrated), value = TRUE, ignore.case = TRUE)
# Define marker cell information
marker_genes <- c("Siglecf")
description <- "SiglecF -> Eosinophils"
# Make plots
explore_annotation_plot(seurat_obj = seurat_integrated, dimplot = dp, marker_genes = marker_genes, description = description, subfolder = reduction)
# Clean up
rm(marker_genes, description)
#################################################################################
# Markers for subsets in the intesine specifically: cDC2: CD103+ CD11b+ or CD103- CD11b+, cDC1: CD103+ CD11b-
grep("Itgae", rownames(seurat_integrated), value = TRUE, ignore.case = TRUE) # CD103
grep("Itgam", rownames(seurat_integrated), value = TRUE, ignore.case = TRUE) # CD11b
# Define marker cell information
marker_genes <- c("Itgae", "Itgam")
description <- "Markers for subsets in the intesine specifically: cDC2: CD103+ CD11b+ or CD103- CD11b+, cDC1: CD103+ CD11b-"
# Make plots
explore_annotation_plot(seurat_obj = seurat_integrated, dimplot = dp, marker_genes = marker_genes, description = description, subfolder = reduction)
# Clean up
rm(marker_genes, description)
}
